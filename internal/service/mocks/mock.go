// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "HomeService/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// DummyLogin mocks base method.
func (m *MockAuthorization) DummyLogin(user_type string, user_id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", user_type, user_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockAuthorizationMockRecorder) DummyLogin(user_type, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockAuthorization)(nil).DummyLogin), user_type, user_id)
}

// Login mocks base method.
func (m *MockAuthorization) Login(user model.UserLogin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthorizationMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthorization)(nil).Login), user)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(tokenString string) (model.UserLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString)
	ret0, _ := ret[0].(model.UserLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), tokenString)
}

// Register mocks base method.
func (m *MockAuthorization) Register(user model.UserRegister) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthorizationMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthorization)(nil).Register), user)
}

// MockHouse is a mock of House interface.
type MockHouse struct {
	ctrl     *gomock.Controller
	recorder *MockHouseMockRecorder
}

// MockHouseMockRecorder is the mock recorder for MockHouse.
type MockHouseMockRecorder struct {
	mock *MockHouse
}

// NewMockHouse creates a new mock instance.
func NewMockHouse(ctrl *gomock.Controller) *MockHouse {
	mock := &MockHouse{ctrl: ctrl}
	mock.recorder = &MockHouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouse) EXPECT() *MockHouseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHouse) Create(house model.House) (model.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", house)
	ret0, _ := ret[0].(model.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHouseMockRecorder) Create(house interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHouse)(nil).Create), house)
}

// GetHouseClientFlatsList mocks base method.
func (m *MockHouse) GetHouseClientFlatsList(houseId int) ([]model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseClientFlatsList", houseId)
	ret0, _ := ret[0].([]model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseClientFlatsList indicates an expected call of GetHouseClientFlatsList.
func (mr *MockHouseMockRecorder) GetHouseClientFlatsList(houseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseClientFlatsList", reflect.TypeOf((*MockHouse)(nil).GetHouseClientFlatsList), houseId)
}

// GetHouseModerFlatsList mocks base method.
func (m *MockHouse) GetHouseModerFlatsList(houseId int) ([]model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseModerFlatsList", houseId)
	ret0, _ := ret[0].([]model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseModerFlatsList indicates an expected call of GetHouseModerFlatsList.
func (mr *MockHouseMockRecorder) GetHouseModerFlatsList(houseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseModerFlatsList", reflect.TypeOf((*MockHouse)(nil).GetHouseModerFlatsList), houseId)
}

// MockFlat is a mock of Flat interface.
type MockFlat struct {
	ctrl     *gomock.Controller
	recorder *MockFlatMockRecorder
}

// MockFlatMockRecorder is the mock recorder for MockFlat.
type MockFlatMockRecorder struct {
	mock *MockFlat
}

// NewMockFlat creates a new mock instance.
func NewMockFlat(ctrl *gomock.Controller) *MockFlat {
	mock := &MockFlat{ctrl: ctrl}
	mock.recorder = &MockFlatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlat) EXPECT() *MockFlatMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlat) Create(flat model.Flat) (model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", flat)
	ret0, _ := ret[0].(model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlatMockRecorder) Create(flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlat)(nil).Create), flat)
}

// GetById mocks base method.
func (m *MockFlat) GetById(id, house_id int) (model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, house_id)
	ret0, _ := ret[0].(model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFlatMockRecorder) GetById(id, house_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFlat)(nil).GetById), id, house_id)
}

// Update mocks base method.
func (m *MockFlat) Update(id, house_id int, status string, user_id uuid.UUID) (model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, house_id, status, user_id)
	ret0, _ := ret[0].(model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlatMockRecorder) Update(id, house_id, status, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlat)(nil).Update), id, house_id, status, user_id)
}
